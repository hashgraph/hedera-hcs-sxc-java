package com.hedera.hcs.sxc.plugins.encryption.diffiehellman;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;

import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;


import javax.crypto.KeyAgreement;

import javax.crypto.interfaces.DHPublicKey;
import javax.crypto.spec.DHParameterSpec;
import org.apache.commons.lang3.tuple.Pair;

import com.hedera.hcs.sxc.interfaces.SxcKeyRotation;

import lombok.extern.log4j.Log4j2;

@Log4j2
public class KeyRotation implements SxcKeyRotation {

    private KeyAgreement keyAgreement;
    
    /**
     * Constructs an object for the key rotation initiator to keep and reuse 
     * the generated KeyAgreement. 
     * Note that the key rotation responder uses a static method to interact with
     * this class while the initiator needs to construct an object. 
     */ 
    public KeyRotation() {
    }

    /**
     * This is the initiator. Generates a public key for the third party and waits
     * for the third party's generated public key, obtained using
     * {@link #respond(byte[] initiatorPubKeyEnc)},  
     * so a shared key can be generated by 
     * executing {@link #finalise(byte[] responderPubKeyEnc)} 
     * The KeyAgreement which is kept in this object's memory must be reused when finalizing the exchange. 
     * 
     * @return the initiator's public key.
     */
    public byte[] initiate() {
        byte[] initiatePubKeyEnc  = null;    
        try {
            KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("DH");
            keyPairGen.initialize(2048);// 2048 if otherside not known
            KeyPair keyPair = keyPairGen.generateKeyPair();
            // keep the agreement in memory to reuse when the third party sends a public key back to the originator
            keyAgreement = KeyAgreement.getInstance("DH");
            keyAgreement.init(keyPair.getPrivate());
            // encode  public key and give it to third party.
            initiatePubKeyEnc = keyPair.getPublic().getEncoded();
        } catch (InvalidKeyException | NoSuchAlgorithmException ex) {
            log.error(ex);
        }
        return initiatePubKeyEnc;
    }


    /**
     * Uses the initiator's public key generated by {@link #initiate()} and obtains a 
     * public key and shared secret. The public key is meant to be given to the initiator
     * so that the same shared key can be constructed by the initiator. 
     * Note that this is a static method, the third party does not need to construct the object. 
     * 
     * @param initiatorPubKeyEnc
     * @return Pair.of(third party's public key, shared secret)
     */
    public static Pair<byte[],byte[]> respond(byte[] initiatorPubKeyEnc) {
        byte[] respondPubKeyEnc = null;
        byte[] respondSecret  = null;
        try {
            KeyFactory respondKeyFac = KeyFactory.getInstance("DH");
            X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(initiatorPubKeyEnc);
            PublicKey initiatePubKey = respondKeyFac.generatePublic(x509KeySpec);
            // Responder gets the DH parameters associated with the initiator's public key.
            DHParameterSpec dhParamFromInitiatorPubKey = ((DHPublicKey) initiatePubKey).getParams();
            // Responder creates his own DH key pair
            KeyPairGenerator respondKeyPairGen = KeyPairGenerator.getInstance("DH");
            respondKeyPairGen.initialize(dhParamFromInitiatorPubKey);
            KeyPair respondKeyPair = respondKeyPairGen.generateKeyPair();
            // Responder creates and initializes his DH KeyAgreement object
            KeyAgreement respondKeyAgree = KeyAgreement.getInstance("DH");
            respondKeyAgree.init(respondKeyPair.getPrivate());
            respondPubKeyEnc = respondKeyPair.getPublic().getEncoded();
            respondKeyAgree.doPhase(initiatePubKey, true);
            respondSecret = respondKeyAgree.generateSecret();
        } catch (NoSuchAlgorithmException | InvalidKeySpecException | InvalidAlgorithmParameterException | InvalidKeyException ex) {
            log.error(ex);
        }
        return Pair.of(respondPubKeyEnc, respondSecret);

    }

    /**
     * Use responder's public key and the KeyAgreement from this object to generate
     * a shared secret for the initiator
     * 
     * @param responderPubKeyEnc This is the responder's public key
     * @return the shared secret. 
     */
    public byte[] finalise(byte[] responderPubKeyEnc) {
        if(this.keyAgreement == null) throw new IllegalStateException("You must initialize the object using 'initiate()'");
        try {
            KeyFactory initKeyFac = KeyFactory.getInstance("DH");
            X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(responderPubKeyEnc);
            PublicKey responderPubKey = initKeyFac.generatePublic(x509KeySpec);
            keyAgreement.doPhase(responderPubKey, true);
            
        } catch (InvalidKeySpecException | InvalidKeyException | IllegalStateException | NoSuchAlgorithmException ex) {
            log.error(ex);
        }
        return keyAgreement.generateSecret();
    }
 }
