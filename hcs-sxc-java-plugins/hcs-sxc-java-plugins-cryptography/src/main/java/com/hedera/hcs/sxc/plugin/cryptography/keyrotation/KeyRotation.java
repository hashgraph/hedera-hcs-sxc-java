package com.hedera.hcs.sxc.plugin.cryptography.keyrotation;
import com.hedera.hcs.sxc.interfaces.SxcKeyRotation;
/*-
 * ‌
 * hcs-sxc-java
 * ​
 * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;

import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;


import javax.crypto.KeyAgreement;

import javax.crypto.interfaces.DHPublicKey;
import javax.crypto.spec.DHParameterSpec;
import org.apache.commons.lang3.tuple.Pair;

import lombok.extern.log4j.Log4j2;

@Log4j2
public class KeyRotation implements SxcKeyRotation{

    public KeyRotation() {
    }

    /**
     * This is the initiator, it generates a public key for the responder and waits
     * for the responder's generated public key, obtained using
     * {@link #responder(byte[] initiatorPublicKey)},  
     * so that the initiator can generate the shared key itself by 
     * executing {@link #finalize(byte[] responderPublicKey, Keyagreement initiatorKeyagree)} 
     * The initiator needs to reuse the KeyAgreement when finalizing the exchange 
     * 
     * @return Initiator's public key to send to responder and KeyAgreement to use for 
     * finalising.
     */
    
    @Override
    public Pair<KeyAgreement, byte[]> initiate() throws Exception {
       
        KeyAgreement initiatorKeyAgree = null;
        byte[] initiatorPubKeyEnc  = null;    
        try {
            KeyPairGenerator initiatorKeypairGen = KeyPairGenerator.getInstance("DH");
            initiatorKeypairGen.initialize(2048);// 2048 if otherside not known
            KeyPair initiatorKeypair = initiatorKeypairGen.generateKeyPair();
            // keep the agreement in memory to reuse when responder sends its public key back to initiator
            initiatorKeyAgree = KeyAgreement.getInstance("DH");
            initiatorKeyAgree.init(initiatorKeypair.getPrivate());
            // encode public key and give it to the responder.
            initiatorPubKeyEnc = initiatorKeypair.getPublic().getEncoded();
        } catch (NoSuchAlgorithmException ex) {
            log.error(ex);
        }
        
        return Pair.of(initiatorKeyAgree, initiatorPubKeyEnc);
    }

     /**
     * Uses initiators public key generated by {@link #initiate()} and obtains  
     * the responder's public key and shared secret. The public key is meant to be given to the initiator
     * so that it can construct the same shared key itself. 
     * Note that this is a static method, responder does not need to construct the object. 
     * 
     * @param initiatorPubKeyEnc
     * @return Pair.of(responder's public key, shared secret)
     */
    @Override
    public Pair<byte[], byte[]> respond(byte[] initiatorPubKeyEnc) throws Exception {
        byte[] responderPubKeyEnc = null;
        byte[] responderSecret  = null;
        try {
            KeyFactory responderKeyFac = KeyFactory.getInstance("DH");
            X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(initiatorPubKeyEnc);
            PublicKey initiatorPubKey = responderKeyFac.generatePublic(x509KeySpec);
            // Responder gets the DH parameters associated with the initiator's public key.
            DHParameterSpec dhParamFromInitiatorPubKey = ((DHPublicKey) initiatorPubKey).getParams();
            // Responder creates its own DH key pair
            KeyPairGenerator responderKeypairGen = KeyPairGenerator.getInstance("DH");
            responderKeypairGen.initialize(dhParamFromInitiatorPubKey);
            KeyPair responderKeypair = responderKeypairGen.generateKeyPair();
            // Responder creates and initializes its DH KeyAgreement object
            KeyAgreement responderKeyAgree = KeyAgreement.getInstance("DH");
            responderKeyAgree.init(responderKeypair.getPrivate());
            responderPubKeyEnc = responderKeypair.getPublic().getEncoded();
            responderKeyAgree.doPhase(initiatorPubKey, true);
            responderSecret = responderKeyAgree.generateSecret();
        } catch (NoSuchAlgorithmException | InvalidKeySpecException | InvalidAlgorithmParameterException | InvalidKeyException ex) {
            log.error(ex);
        }
        return Pair.of(responderPubKeyEnc, responderSecret);
    }

     /**
     * Use the responder's public key and the KeyAgreement that has been kept
     * after {@link #initiate() } to generate
     * a shared secret for the initiator
     * 
     * @param responderPubKeyEnc This is responder's public key
     * @param keyAgreement Has been obtained during initialisation
     * @return the shared secret. 
     */
 
    
    @Override
    public byte[] finalise(byte[] responderPubKeyEnc, KeyAgreement keyAgreement) throws Exception {
        try {
            KeyFactory initiatorKeyFac = KeyFactory.getInstance("DH");
            X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(responderPubKeyEnc);
            PublicKey responderPubKey = initiatorKeyFac.generatePublic(x509KeySpec);
            keyAgreement.doPhase(responderPubKey, true);
            
        } catch (InvalidKeySpecException | InvalidKeyException | IllegalStateException | NoSuchAlgorithmException ex) {
            log.error(ex);
        }
        return keyAgreement.generateSecret();
    }
 }
