syntax = "proto3";

package taxonomy.model;
import "model/protos/core.proto";
import "model/protos/artifact.proto";
option csharp_namespace = "TTI.TTF.Taxonomy.Model";
option java_package = "org.tti.ttf.taxonomy.model";
option java_multiple_files = true;

//The Taxonomy contains collections of artifacts where each collection is defined in a map with the index being the symbol of the artifact for the collection.
message Taxonomy{
    TaxonomyVersion version = 1; //Version of the TOM
    map<string, taxonomy.model.core.Base> base_token_types = 2; //Collection of Token Bases
    map<string, taxonomy.model.core.Behavior> behaviors = 3; //Collection of Behaviors
    map<string, taxonomy.model.core.BehaviorGroup> behavior_groups = 4; //Collection of BehaviorGroups
    map<string, taxonomy.model.core.PropertySet> property_sets = 5; //Collection of PropertySets
    map<string, taxonomy.model.core.TemplateFormula> template_formulas = 6; //Collection of TemplateFormulas
    map<string, taxonomy.model.core.TemplateDefinition> template_definitions = 7; //Collection of TemplateDefinitions
    Hierarchy token_template_hierarchy = 8; //Visual or logical hierarchy of Templates.
    taxonomy.model.artifact.FormulaGrammar formula_grammar = 9; //Global grammar for formula objects.
}

//Support for multiple versions - future use.
message TaxonomyVersion{
    string id = 1; //Unique GUID/UUID of the TOM
    string version = 2; //Simple version
    string state_hash = 3; //SHA3 Hashed version
}

//Logical hierarchy of branches and token templates.
message Hierarchy {
    FungibleBranch fungibles = 1; //Fungible root branch
    NonFungibleBranch non_fungibles = 2; //non-fungible root branch
    HybridBranch hybrids = 3; //Hybrid root branch
}

message HybridBranch{
    FungibleBranch fungible = 1;
    NonFungibleBranch non_fungible = 2;
}

message FungibleBranch{
    BranchRoot fractional = 1;
    BranchRoot whole = 2;
}

message NonFungibleBranch{
    BranchRoot fractional = 1;
    BranchRoot whole = 2;
    BranchRoot singleton = 3;
}

//Uses classification to represent a branch
message BranchIdentifier{
    taxonomy.model.artifact.Classification classification = 1;
    string formula_id = 2; //Good for visualizations
}

message BranchRoot{
    BranchIdentifier branch_identifier = 1;
    string parent_formula_id = 2; //Parent formula idea for walking the tree.
    string name = 3; //Name of the branch.
    taxonomy.model.core.TemplateFormula branch_formula = 4;
    taxonomy.model.core.TokenTemplates templates = 5;
    repeated BranchRoot branches = 6; //Nested branches
}

